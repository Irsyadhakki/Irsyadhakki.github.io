// Like button functionality
document.querySelectorAll('.like-btn').forEach(button => {
    button.addEventListener('click', function() {
        let likeCount = this.closest('.card-body').querySelector('.like-count');
        let currentLikes = parseInt(likeCount.textContent.split(' ')[0]);
        this.querySelector('i').classList.toggle('liked');
        if (this.querySelector('i').classList.contains('liked')) {
            currentLikes += 1;
        } else {
            currentLikes -= 1;
        }
        likeCount.textContent = `${currentLikes} Likes`;
    });
});

// Fungsi untuk menambahkan komentar ke dalam ul
function addComment(menuId) {
    const commentInput = document.getElementById(`comment${menuId}`);
    const commentText = commentInput.value.trim();
    if (commentText !== "") {
        const commentList = document.getElementById(`commentList${menuId}`);

        // Buat elemen baru untuk komentar
        const commentItem = document.createElement('li');
        commentItem.classList.add('border-bottom', 'py-2');
        commentItem.textContent = commentText;

        // Tambahkan komentar ke dalam list
        commentList.appendChild(commentItem);

        // Kosongkan input komentar setelah mengirim
        commentInput.value = "";
    }
}


// Bootstrap modal (using data-bs-toggle) already handles the modal triggering when the cart and location buttons are clicked.

document.addEventListener("DOMContentLoaded", function() {
    let isLoggedIn = false; // Simulasi status login, ubah sesuai dengan kondisi sebenarnya

    // Jika Profile di klik
    document.querySelector('.dropdown-item[data-bs-target="#loginModal"]').addEventListener('click', function(event) {
        if (isLoggedIn) {
            var profileModal = new bootstrap.Modal(document.getElementById('profileModal'));
            profileModal.show();
        } else {
            var loginModal = new bootstrap.Modal(document.getElementById('loginModal'));
            loginModal.show();
        }
    });

    // Logout button
    document.getElementById('logoutBtn').addEventListener('click', function() {
        isLoggedIn = false;
        alert("You have logged out.");
        // Tambahkan logika logout di sini, seperti clear session atau redirect ke halaman login
    });
});

// Bootstrap modal (using data-bs-toggle) already handles the modal triggering when the cart and location buttons are clicked.

document.addEventListener("DOMContentLoaded", function() {
    let isLoggedIn = false; // Simulasi status login, ubah sesuai dengan kondisi login sebenarnya

    document.getElementById('btnBelanja').addEventListener('click', function() {
        if (isLoggedIn) {
            window.location.href = '#menu'; // Jika sudah login, scroll ke #menu
        } else {
            window.location.href = '/page/register.html'; // Jika belum login, arahkan ke register
        }
    });
});


function addToCart(itemName, itemPrice, quantity) {
    const existingItem = cart.find(item => item.name === itemName);
    if (existingItem) {
        existingItem.quantity += quantity; // Menambah jumlah berdasarkan input quantity
    } else {
        cart.push({ name: itemName, price: itemPrice, quantity }); // Menggunakan quantity dari parameter
    }
    updateCartDisplay(); // Memperbarui tampilan keranjang
}


let cart = []; // Menyimpan item dalam keranjang

function addToCart(itemName, itemPrice, quantity) {
    const existingItem = cart.find(item => item.name === itemName);
    if (existingItem) {
        existingItem.quantity += quantity; // Menambah jumlah berdasarkan input quantity
    } else {
        cart.push({ name: itemName, price: itemPrice, quantity }); // Menggunakan quantity dari parameter
    }
    updateCartDisplay(); // Memperbarui tampilan keranjang
}

function updateCartDisplay() {
    const cartItemsDiv = document.getElementById('cartItems');
    cartItemsDiv.innerHTML = ''; // Kosongkan tampilan cart
    if (cart.length === 0) {
        cartItemsDiv.innerHTML = '<p class="text-muted">Keranjang Anda kosong.</p>'; // Pesan jika keranjang kosong
    } else {
        cart.forEach(item => {
            const cartItem = document.createElement('div');
            cartItem.classList.add('list-group-item', 'd-flex', 'justify-content-between');
            cartItem.innerHTML = `
                ${item.name} - Rp ${item.price} x ${item.quantity}
                <button class="btn btn-danger btn-sm" onclick="removeFromCart('${item.name}')">Hapus</button>
            `;
            cartItemsDiv.appendChild(cartItem);
        });
    }
}

function removeFromCart(itemName) {
    cart = cart.filter(item => item.name !== itemName); // Menghapus item dari keranjang
    updateCartDisplay(); // Memperbarui tampilan keranjang
}

function placeOrder() {
    const name = document.getElementById('userName').value;
    const address = document.getElementById('userAddress').value;
    const location = document.getElementById('userLocation').value;

    if (name && address && location) {
        alert(`Pesanan berhasil dibuat untuk ${name} ke alamat ${address} di lokasi ${location}.`);
        cart = []; // Mengosongkan cart setelah pemesanan
        updateCartDisplay(); // Memperbarui tampilan keranjang
    } else {
        alert('Silakan lengkapi semua informasi pengiriman.'); // Pesan jika informasi tidak lengkap
    }
}

document.addEventListener('DOMContentLoaded', function() {
    const h1 = document.querySelector('h1.display-4.text-custom');
    h1.style.width = h1.scrollWidth + 'px'; // Ensure it takes the full width of the text
});


document.addEventListener('DOMContentLoaded', function() {
    const cards = document.querySelectorAll('.card');

    const showCardsOnScroll = () => {
        const triggerBottom = window.innerHeight / 1.2;

        cards.forEach(card => {
            const cardTop = card.getBoundingClientRect().top;

            if (cardTop < triggerBottom) {
                card.classList.add('show'); // Add 'show' class when the card is in view
            }
        });
    };

    // Trigger the function on scroll
    window.addEventListener('scroll', showCardsOnScroll);

    // Initial trigger to check if cards are already in view
    showCardsOnScroll();
});



document.addEventListener('DOMContentLoaded', function() {
    const contactElements = document.querySelectorAll('.contact-section .col-md-4, .contact-section .col-md-8, .contact-section .map-container');

    const showContactOnScroll = () => {
        const triggerBottom = window.innerHeight / 1.2;

        contactElements.forEach(element => {
            const elementTop = element.getBoundingClientRect().top;

            if (elementTop < triggerBottom) {
                element.classList.add('show'); // Add 'show' class when the element is in view
            }
        });
    };

    // Trigger the function on scroll
    window.addEventListener('scroll', showContactOnScroll);

    // Initial trigger to check if elements are already in view
    showContactOnScroll();
});

document.addEventListener('DOMContentLoaded', function() {
    const elements = document.querySelectorAll('.about-section .col-md-6, .about-section .text-center, .how-to-order .text-center, .accordion-item');

    const showElementsOnScroll = () => {
        const triggerBottom = window.innerHeight / 1.2;

        elements.forEach(element => {
            const elementTop = element.getBoundingClientRect().top;

            if (elementTop < triggerBottom) {
                element.classList.add('show'); // Add 'show' class when the element is in view
            }
        });
    };

    // Trigger the function on scroll
    window.addEventListener('scroll', showElementsOnScroll);

    // Initial trigger to check if elements are already in view
    showElementsOnScroll();
});